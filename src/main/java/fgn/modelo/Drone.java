
package fgn.modelo;

/**
 * <p>
 * Esta classe representa um drone de varredura a√©rea integrado ao sistema
 * Forest Guardian Network. Herda da classe abstrata {@link Equipamento},
 * implementando funcionalidades espec√≠ficas para monitoramento a√©reo,
 * capta√ß√£o de imagens t√©rmicas e varredura territorial automatizada.
 * </p>
 * <p>
 * A classe implementa sobrescrita de m√©todos abstratos da superclasse,
 * fornecendo comportamentos espec√≠ficos para opera√ß√µes de voo, coleta
 * de dados visuais e transmiss√£o em tempo real. Cada drone est√° vinculado
 * a uma esta√ß√£o de bombeiros espec√≠fica para organiza√ß√£o operacional.
 * </p>
 *
 * @author Renan Dias Utida, Fernanda Rocha Menon e Luiza Macena Dantas
 * @version 1.0
 */
public class Drone extends Equipamento {
    /**
     * ID da esta√ß√£o de bombeiros propriet√°ria do drone
     */
    private int idEstacaoResponsavel;

    /**
     * Construtor para cria√ß√£o de drone com vincula√ß√£o √† esta√ß√£o respons√°vel.
     * Inicializa drone atrav√©s da superclasse Equipamento e estabelece
     * relacionamento com esta√ß√£o de bombeiros para organiza√ß√£o operacional.
     *
     * @param idDrone identificador √∫nico do drone no sistema
     * @param modeloDrone modelo ou denomina√ß√£o espec√≠fica do drone
     * @param idEstacaoResponsavel ID da esta√ß√£o de bombeiros propriet√°ria do drone
     */
    public Drone(int idDrone, String modeloDrone, int idEstacaoResponsavel) {
        super(idDrone, modeloDrone, "Drone de Varredura"); // Chama construtor da classe pai
        this.idEstacaoResponsavel = idEstacaoResponsavel;
    }

    // M√©todos espec√≠ficos do Drone (mant√©m compatibilidade)
    /**
     * Obt√©m o identificador do drone (compatibilidade com c√≥digo legado).
     * Metodo de conveni√™ncia que mapeia para ID da superclasse.
     *
     * @return ID √∫nico do drone
     */
    public int getIdDrone() {
        return getId();
    }

    /**
     * Define novo identificador para o drone.
     * Acesso direto ao atributo protegido da superclasse.
     *
     * @param idDrone novo ID do drone
     */
    public void setIdDrone(int idDrone) {
        this.id = idDrone;
    }

    /**
     * Obt√©m o modelo do drone (compatibilidade com c√≥digo legado).
     * Metodo de conveni√™ncia que mapeia para nome da superclasse.
     *
     * @return modelo/nome do drone
     */
    public String getModeloDrone() {
        return getNome();
    }

    /**
     * Define novo modelo para o drone.
     * Acesso direto ao atributo protegido da superclasse.
     *
     * @param modeloDrone novo modelo do drone
     */
    public void setModeloDrone(String modeloDrone) {
        this.nome = modeloDrone;
    }

    /**
     * Obt√©m ID da esta√ß√£o de bombeiros respons√°vel pelo drone.
     * Determina qual esta√ß√£o possui jurisdi√ß√£o sobre o equipamento.
     *
     * @return ID da esta√ß√£o respons√°vel
     */
    public int getIdEstacaoResponsavel() {
        return idEstacaoResponsavel;
    }

    /**
     * Define nova esta√ß√£o respons√°vel pelo drone.
     * Utilizado para transfer√™ncias de equipamento entre esta√ß√µes.
     *
     * @param idEstacaoResponsavel ID da nova esta√ß√£o respons√°vel
     */
    public void setIdEstacaoResponsavel(int idEstacaoResponsavel) {
        this.idEstacaoResponsavel = idEstacaoResponsavel;
    }

    // Metodo para compatibilidade com c√≥digo existente
    /**
     * Obt√©m ID da esta√ß√£o base (metodo de compatibilidade).
     * Alias para getIdEstacaoResponsavel() mantendo compatibilidade.
     *
     * @return ID da esta√ß√£o base do drone
     */
    public int getIdEstacaoBase() {
        return idEstacaoResponsavel;
    }

    /**
     * Implementa√ß√£o espec√≠fica da opera√ß√£o de varredura a√©rea do drone.
     * Sobrescreve metodo abstrato da superclasse {@link Equipamento#operar()},
     * executando sequ√™ncia completa de decolagem, ativa√ß√£o de sistemas,
     * mapeamento e transmiss√£o de dados em tempo real.
     */
    @Override
    public void operar() {
        System.out.println("üöÅ " + nome + " decolando para varredura a√©rea...");
        System.out.println("üì° Ativando sistema de c√¢meras t√©rmicas...");
        System.out.println("üó∫Ô∏è Mapeando √°rea e coletando dados visuais...");
        System.out.println("üìä Transmitindo imagens em tempo real para base...");
    }

    /**
     * Implementa√ß√£o espec√≠fica para exibi√ß√£o de informa√ß√µes do drone.
     * Sobrescreve metodo abstrato da superclasse {@link Equipamento#exibirInformacoes()},
     * apresentando dados formatados espec√≠ficos para drones incluindo
     * identifica√ß√£o, modelo e esta√ß√£o respons√°vel.
     */
    @Override
    public void exibirInformacoes() {
        System.out.println("üöÅ #" + id + " - " + nome + "ID Esta√ß√£o: " + idEstacaoResponsavel);
        System.out.println();
    }

    /**
     * Exibe mensagem espec√≠fica para identifica√ß√£o de √°rea detectada.
     * Metodo especializado utilizado ap√≥s varredura para solicitar
     * sele√ß√£o de local espec√≠fico onde inc√™ndio foi identificado.
     */
    public void exibirAreaIdentificada() {
        System.out.println("üìç √Årea identificada! Escolha o local onde teve o inc√™ndio:");
    }
}