
package fgn.modelo;

/**
 * <p>
 * Esta classe representa um sensor de detec√ß√£o autom√°tica integrado ao sistema
 * Forest Guardian Network. Herda da classe abstrata {@link Equipamento},
 * implementando funcionalidades espec√≠ficas para monitoramento cont√≠nuo,
 * detec√ß√£o de anomalias e an√°lise de dados ambientais.
 * </p>
 * <p>
 * A classe suporta m√∫ltiplos tipos de sensores (T√©rmico, Fuma√ßa, Qu√≠mico),
 * cada um com comportamentos operacionais espec√≠ficos. Implementa sobrescrita
 * de m√©todos abstratos da superclasse para fornecer an√°lises especializadas
 * conforme o tipo de sensor instanciado.
 * </p>
 *
 * @author Renan Dias Utida, Fernanda Rocha Menon e Luiza Macena Dantas
 * @version 1.0
 */
public class Sensor extends Equipamento {

    /**
     * Construtor para cria√ß√£o de sensor com tipo espec√≠fico de detec√ß√£o.
     * Inicializa sensor atrav√©s da superclasse Equipamento, definindo
     * tipo especializado para determinar comportamento operacional.
     *
     * @param idSensor identificador √∫nico do sensor no sistema
     * @param nomeSensor denomina√ß√£o espec√≠fica ou modelo do sensor
     * @param tipo categoria especializada do sensor ("T√©rmico", "Fuma√ßa", "Qu√≠mico")
     */
    public Sensor(int idSensor, String nomeSensor, String tipo) {
        super(idSensor, nomeSensor, tipo); // Chama construtor da classe pai
    }

    // Getters e Setters
    /**
     * Obt√©m o identificador do sensor (compatibilidade com c√≥digo legado).
     * Metodo de conveni√™ncia que mapeia para ID da superclasse.
     *
     * @return ID √∫nico do sensor
     */
    public int getIdSensor() {
        return getId(); // Usa metodo da classe pai
    }

    /**
     * Define novo identificador para o sensor.
     * Acesso direto ao atributo protegido da superclasse.
     *
     * @param idSensor novo ID do sensor
     */
    public void setIdSensor(int idSensor) {
        this.id = idSensor; // Acesso direto ao atributo protected
    }

    /**
     * Obt√©m o nome do sensor (compatibilidade com c√≥digo legado).
     * Metodo de conveni√™ncia que mapeia para nome da superclasse.
     *
     * @return nome/modelo do sensor
     */
    public String getNomeSensor() {
        return getNome(); // Usa metodo da classe pai
    }

    /**
     * Define novo nome para o sensor.
     * Acesso direto ao atributo protegido da superclasse.
     *
     * @param nomeSensor novo nome do sensor
     */
    public void setNomeSensor(String nomeSensor) {
        this.nome = nomeSensor; // Acesso direto ao atributo protected
    }

    /**
     * Implementa√ß√£o espec√≠fica da opera√ß√£o de an√°lise do sensor.
     * Sobrescreve metodo abstrato da superclasse {@link Equipamento#operar()},
     * executando sequ√™ncia de an√°lise especializada conforme tipo do sensor.
     * Comportamento varia dinamicamente baseado no tipo (polimorfismo interno).
     */
    @Override
    public void operar() {
        System.out.println("üîç " + nome + " iniciando an√°lise da √°rea...");

        switch (tipo) {
            case "T√©rmico":
                System.out.println("üå°Ô∏è Escaneando varia√ß√µes de temperatura...");
                System.out.println("üìä Detectando pontos de calor an√¥malos...");
                break;
            case "Fuma√ßa":
                System.out.println("üí® Analisando densidade de part√≠culas no ar...");
                System.out.println("üî¨ Identificando composi√ß√£o qu√≠mica da fuma√ßa...");
                break;
            case "Qu√≠mico":
                System.out.println("üß™ Detectando gases de combust√£o...");
                System.out.println("‚öóÔ∏è Analisando concentra√ß√£o de mon√≥xido de carbono...");
                break;
        }
        System.out.println("üìã Dados coletados e transmitidos para central!");
    }

    /**
     * Implementa√ß√£o espec√≠fica para exibi√ß√£o de informa√ß√µes do sensor.
     * Sobrescreve metodo abstrato da superclasse {@link Equipamento#exibirInformacoes()},
     * apresentando dados formatados em linha √∫nica incluindo ID, nome e tipo
     * para sele√ß√£o em interfaces interativas.
     */
    @Override
    public void exibirInformacoes() {
        System.out.println(id + ". " + nome + " (" + tipo + ")");
    }
}